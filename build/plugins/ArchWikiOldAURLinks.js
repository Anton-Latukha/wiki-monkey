// Generated by CoffeeScript 2.0.3
// Wiki Monkey - MediaWiki bot and editor-assistant user script
// Copyright (C) 2011 Dario Giovannetti <dev@dariogiovannetti.net>

// This file is part of Wiki Monkey.

// Wiki Monkey is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Wiki Monkey is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Wiki Monkey.  If not, see <http://www.gnu.org/licenses/>.
var RegEx;

RegEx = require('../../lib.js.generic/dist/RegEx');

module.exports = class exports {
  // TODO: Plugin disabled because the ArchPackages module is currently
  //       unusable
  constructor(WM) {
    this.doReplace = this.doReplace.bind(this);
    this.doReplaceContinue = this.doReplaceContinue.bind(this);
    this.checkIfOfficial = this.checkIfOfficial.bind(this);
    this.doReplaceContinue2 = this.doReplaceContinue2.bind(this);
    this.mainEnd = this.mainEnd.bind(this);
    this.mainAutoReplace = this.mainAutoReplace.bind(this);
    this.mainAutoWrite = this.mainAutoWrite.bind(this);
    this.mainAutoEnd = this.mainAutoEnd.bind(this);
    this.WM = WM;
  }

  doReplace(source, call, callArgs) {
    var links, newText, regExp;
    regExp = /\[(https?\:\/\/aur\.archlinux\.org\/packages\.php\?ID\=([0-9]+)) ([^\]]+?)\]/g;
    links = RegEx.matchAll(source, regExp);
    newText = source;
    if (links.length > 0) {
      return this.WM.ArchPackages.getAURInfo(links[0].match[2], this.doReplaceContinue, [source, newText, links, 0, call, callArgs]);
    } else {
      return call(source, newText, callArgs);
    }
  }

  doReplaceContinue(res, args) {
    var call, callArgs, index, link, links, newText, newlink, pkgname, source;
    source = args[0];
    newText = args[1];
    links = args[2];
    index = args[3];
    call = args[4];
    callArgs = args[5];
    link = links[index];
    this.WM.Log.logInfo("Processing " + this.WM.Log.linkToPage(link.match[1], link.match[0]) + " ...");
    if (res.type === "error") {
      this.WM.Log.logError("The AUR's RPC interface returned an error: " + res.results);
      return call(-1, -1, callArgs);
    } else {
      if (res.resultcount > 0) {
        pkgname = res.results.Name;
        if (link.match[3] === pkgname) {
          newlink = "{{AUR|" + pkgname + "}}";
          newText = newText.replace(link.match[0], newlink);
          this.WM.Log.logInfo("Checked and replaced link with " + newlink);
          return this.doReplaceContinue2(source, newText, links, index, call, callArgs);
        } else {
          this.WM.Log.logWarning("Couldn't replace: the link doesn't use the package name (" + pkgname + ") as the anchor text");
          return this.doReplaceContinue2(source, newText, links, index, call, callArgs);
        }
      } else {
        return this.WM.ArchPackages.isOfficialPackage(link.match[3], this.checkIfOfficial, [link, source, newText, links, index, call, callArgs]);
      }
    }
  }

  checkIfOfficial(res, args) {
    var call, callArgs, index, link, links, newText, newlink, source;
    link = args[0];
    source = args[1];
    newText = args[2];
    links = args[3];
    index = args[4];
    call = args[5];
    callArgs = args[6];
    if (res) {
      newlink = "{{Pkg|" + link.match[3] + "}}";
      newText = newText.replace(link.match[0], newlink);
      this.WM.Log.logInfo("Replaced link with " + newlink);
      this.WM.Log.logWarning("The package doesn't exist anymore in the AUR, but a package with the same name as the link anchor has been found in the official repositories");
    } else {
      this.WM.Log.logWarning("Couldn't replace: the package doesn't exist anymore in the AUR and there's no package in the official repositories that has the same name as the link anchor");
    }
    return this.doReplaceContinue2(source, newText, links, index, call, callArgs);
  }

  doReplaceContinue2(source, newText, links, index, call, callArgs) {
    index++;
    if (links[index]) {
      return this.WM.ArchPackages.getAURInfo(links[index].match[2], this.doReplaceContinue, [source, newText, links, index, call, callArgs]);
    } else {
      return call(source, newText, callArgs);
    }
  }

  main(args, callNext) {
    var source;
    source = this.WM.Editor.readSource();
    this.WM.Log.logInfo("Replacing old-style direct AUR package links ...");
    return this.doReplace(source, this.mainEnd, callNext);
  }

  mainEnd(source, newtext, callNext) {
    if (source === -1) {
      callNext = false;
    } else if (newtext !== source) {
      this.WM.Editor.writeSource(newtext);
      this.WM.Log.logInfo("Replaced old-style direct AUR package links");
    } else {
      this.WM.Log.logInfo("No automatically replaceable old-style AUR " + "package links found");
    }
    if (callNext) {
      return callNext();
    }
  }

  mainAuto(args, title, callBot, chainArgs) {
    var summary;
    summary = args;
    return this.WM.MW.callQueryEdit(title, this.mainAutoReplace, [summary, callBot]);
  }

  mainAutoReplace(title, source, timestamp, edittoken, args) {
    var callBot, summary;
    summary = args[0];
    callBot = args[1];
    return this.doReplace(source, this.mainAutoWrite, [title, edittoken, timestamp, summary, callBot]);
  }

  mainAutoWrite(source, newtext, args) {
    var callBot, edittoken, summary, timestamp, title;
    title = args[0];
    edittoken = args[1];
    timestamp = args[2];
    summary = args[3];
    callBot = args[4];
    if (source === -1) {
      return callBot(false, null);
    } else if (newtext !== source) {
      return this.WM.MW.callAPIPost({
        action: "edit",
        bot: "1",
        title: title,
        summary: summary,
        text: newtext,
        basetimestamp: timestamp,
        token: edittoken
      }, this.mainAutoEnd, callBot, null);
    } else {
      return callBot(0, null);
    }
  }

  mainAutoEnd(res, callBot) {
    if (res.edit && res.edit.result === 'Success') {
      return callBot(1, null);
    } else if (res.error) {
      this.WM.Log.logError(res.error.info + " (" + res.error.code + ")");
      return callBot(res.error.code, null);
    } else {
      return callBot(false, null);
    }
  }

};
