// Generated by CoffeeScript 1.12.7
var $, CSS,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

$ = require('jquery');

CSS = require('../../lib.js.generic/dist/CSS');

module.exports.Filters = (function() {
  function Filters(WM) {
    this.WM = WM;
    this.executePlugin = bind(this.executePlugin, this);
    this.updateFilterUI = bind(this.updateFilterUI, this);
  }

  Filters.prototype._makeUI = function(plugins) {
    var commandsFilterDiv, div, divFilter, filters, pid, pluginConf, pluginInst, pluginName, selectFilter;
    CSS.addStyleElement("#WikiMonkeyFilters-Commands {display:flex; align-items:center; justify-content:space-between;} #WikiMonkeyFilters-Commands > select {flex:auto;} #WikiMonkeyFilters-Commands > select, #WikiMonkeyFilters-Commands > input[type='button'] {margin-right:1em;} #WikiMonkeyFilters-Commands > input[type='checkbox'] {margin-right:0.4em;}");
    filters = [];
    selectFilter = $('<select/>').change(this.updateFilterUI(filters));
    for (pid in plugins) {
      pluginConf = plugins[pid];
      pluginName = pluginConf[0];
      pluginInst = pluginConf[1];
      if (!this.WM.Plugins[pluginName]) {
        continue;
      }
      if (!pluginInst || !pluginInst.length) {
        continue;
      }
      filters.push(pluginConf);
      $('<option/>').text(pluginInst[pluginInst.length - 1]).appendTo(selectFilter);
    }
    if (filters.length) {
      commandsFilterDiv = $('<div/>').attr('id', 'WikiMonkeyFilters-Commands');
      commandsFilterDiv.append(selectFilter);
      $('<input/>').attr('type', 'button').val('Apply filter').click(this.executePlugin(filters)).appendTo(commandsFilterDiv);
      $('<input/>').attr('type', 'checkbox').change(this.toggleLog).appendTo(commandsFilterDiv);
      $('<span/>').text('Show Log').appendTo(commandsFilterDiv);
      divFilter = $('<div/>').attr('id', "WikiMonkeyFilters-Options");
      $('<div/>').appendTo(divFilter);
      this.doUpdateFilterUI(divFilter, filters, 0);
      div = $('<div/>').attr('id', 'WikiMonkeyFilters').append(commandsFilterDiv).append(divFilter);
      return div[0];
    } else {
      return false;
    }
  };

  Filters.prototype.updateFilterUI = function(filters) {
    var self;
    self = this;
    return function(event) {
      var UI, id, select;
      UI = $('#WikiMonkeyFilters-Options');
      select = $('#WikiMonkeyFilters-Commands').find('select').first();
      id = select[0].selectedIndex;
      return self.doUpdateFilterUI(UI, filters, id);
    };
  };

  Filters.prototype.doUpdateFilterUI = function(UI, filters, id) {
    var makeUI;
    makeUI = this.WM.Plugins[filters[id][0]].makeUI;
    if (makeUI instanceof Function) {
      return UI.children().first().replaceWith(makeUI(filters[id][2]));
    } else {
      return UI.children().first().replaceWith($('<div/>'));
    }
  };

  Filters.prototype.executePlugin = function(filters) {
    var self;
    self = this;
    return function(event) {
      var id, select;
      select = $('#WikiMonkeyFilters-Commands').find('select').first();
      id = select[0].selectedIndex;
      self.WM.Plugins[filters[id][0]].main(filters[id][2]);
      return this.disabled = true;
    };
  };

  Filters.prototype.toggleLog = function(event) {
    if (this.checked) {
      return $('#WikiMonkeyLog').show();
    } else {
      return $('#WikiMonkeyLog').hide();
    }
  };

  return Filters;

})();
