// Generated by CoffeeScript 1.12.7
var HTTP, Obj;

HTTP = require('../../lib.js.generic/dist/HTTP');

Obj = require('../../lib.js.generic/dist/Obj');

module.exports.MW = (function() {
  var interwikiFixes, joinParams, localWikiPaths, localWikiUrls, wikiPaths;

  localWikiPaths = null;

  localWikiUrls = null;

  function MW(WM) {
    var hostname, key, wpaths;
    this.WM = WM;
    wpaths = this._getWikiPaths(location.href);
    hostname = wpaths[0];
    this.userInfo = null;
    localWikiPaths = wpaths[1];
    localWikiUrls = {};
    for (key in localWikiPaths) {
      localWikiUrls[key] = hostname + localWikiPaths[key];
    }
  }

  wikiPaths = {
    known: {
      "^https?://[^\.]+\.wikipedia\.org": {
        short: "/wiki/",
        full: "/w/index.php",
        api: "/w/api.php"
      },
      "^https?://wiki\.archlinux\.org": {
        short: "/index.php/",
        full: "/index.php",
        api: "/api.php"
      },
      "^https?://wiki\.archlinux\.de": {
        short: "/title/",
        full: "/index.php",
        api: "/api.php"
      },
      "^http://wiki\.archlinux\.fr": {
        short: "/",
        full: "/index.php",
        api: "/api.php"
      },
      "^https?://wiki\.archlinux\.jp": {
        short: "/index.php/",
        full: "/index.php",
        api: "/api.php"
      },
      "^http://wiki\.archlinux\.ro": {
        short: "/index.php/",
        full: "/index.php",
        api: "/api.php"
      },
      "^http://wiki\.archlinux\.ir": {
        short: "/index.php/",
        full: "/index.php",
        api: "/api.php"
      }
    },
    default_: {
      short: "/index.php?title=",
      full: "/index.php",
      api: "/api.php"
    }
  };

  interwikiFixes = [["https://wiki.archlinux.org/index.php/$1_(", "https://wiki.archlinux.org/index.php/$1%20("]];

  MW.prototype._getWikiPaths = function(href) {
    var hostname, match, p, paths, r, re;
    for (r in wikiPaths.known) {
      re = new RegExp(r, "i");
      match = re.exec(href);
      if (match) {
        hostname = match[0];
        paths = {};
        for (p in wikiPaths.known[r]) {
          paths[p] = wikiPaths.known[r][p];
        }
        break;
      }
    }
    if (!paths) {
      hostname = HTTP.getUrlLocation(href).hostname;
      paths = {};
      for (p in wikiPaths.default_) {
        paths[p] = wikiPaths.default_[p];
      }
    }
    return [hostname, paths];
  };

  MW.prototype.getWikiPaths = function(href) {
    if (href) {
      return this._getWikiPaths(href)[1];
    } else {
      return localWikiPaths;
    }
  };

  MW.prototype.getWikiUrls = function(href) {
    var hostname, key, paths, urls, wpaths;
    if (href) {
      wpaths = this._getWikiPaths(href);
      hostname = wpaths[0];
      paths = wpaths[1];
      urls = {};
      for (key in paths) {
        urls[key] = hostname + paths[key];
      }
      return urls;
    } else {
      return localWikiUrls;
    }
  };

  MW.prototype.getTitleFromWikiUrl = function(url) {
    var match, pathname, r, re, title;
    title = HTTP.getURIParameters(url).title;
    if (!title) {
      pathname = HTTP.getUrlLocation(url).pathname;
      for (r in wikiPaths.known) {
        re = new RegExp(r, "i");
        match = re.exec(url);
        if (match) {
          if (pathname.indexOf(wikiPaths.known[r].short) === 0) {
            title = pathname.substr(wikiPaths.known[r].short.length);
          } else {
            title = false;
          }
          break;
        }
      }
      if (!title) {
        if (pathname.indexOf(wikiPaths.default_.short) === 0) {
          title = pathname.substr(wikiPaths.default_.short.length);
        } else {
          title = false;
        }
      }
    }
    return title;
  };

  MW.prototype.failedQueryError = function(finalUrl) {
    return "Failed query: " + this.WM.Log.linkToPage(finalUrl, finalUrl) + "\nYou may have tried to use a plugin which requires cross-origin HTTP requests, but you are not using Greasemonkey (Firefox), Tampermonkey (Chrome/Chromium), Violentmonkey (Opera) or a similar extension";
  };

  MW.prototype.failedHTTPRequestError = function(err) {
    return "Failed HTTP request - " + err + "\nYou may have tried to use a plugin which requires cross-origin HTTP requests, but you are not using Greasemonkey (Firefox), Tampermonkey (Chrome/Chromium), Violentmonkey (Opera) or a similar extension";
  };

  MW.prototype.callAPIGet = function(params, api, call, callArgs, callError) {
    var err, query;
    if (!api) {
      api = localWikiUrls.api;
    }
    query = {
      method: "GET",
      url: api + "?format=json" + joinParams(params),
      onload: (function(_this) {
        return function(res) {
          var err, json;
          try {
            if (Obj.getFirstItem(res.responseJSON)) {
              json = res.responseJSON;
            } else {
              json = JSON.parse(res.responseText);
            }
          } catch (error) {
            err = error;
            _this.WM.Log.logError("It is likely that the " + _this.WM.Log.linkToPage(api, "API") + " for this wiki is disabled");
            if (callError) {
              callError(callArgs);
            }
          }
          if (json) {
            return call(json, callArgs);
          }
        };
      })(this),
      onerror: (function(_this) {
        return function(res) {
          _this.WM.Log.logError(_this.failedQueryError(res.finalUrl));
          if (confirm("Wiki Monkey error: Failed query\n\nDo you want " + "to retry?")) {
            _this.WM.Log.logInfo("Retrying ...");
            return _this.callAPIGet(params, api, call, callArgs, callError);
          } else if (callError) {
            return callError(callArgs);
          }
        };
      })(this)
    };
    try {
      return GM_xmlhttpRequest(query);
    } catch (error) {
      err = error;
      return this.WM.Log.logError(this.failedHTTPRequestError(err));
    }
  };

  MW.prototype.callAPIPost = function(params, api, call, callArgs, callError) {
    var err, p, query, string;
    if (!api) {
      api = localWikiUrls.api;
    }
    query = {
      method: "POST",
      url: api,
      onload: (function(_this) {
        return function(res) {
          var err, json;
          try {
            if (Obj.getFirstItem(res.responseJSON)) {
              json = res.responseJSON;
            } else {
              json = JSON.parse(res.responseText);
            }
          } catch (error) {
            err = error;
            _this.WM.Log.logError("It is likely that the " + _this.WM.Log.linkToPage(api, "API") + " for this wiki is disabled");
            if (callError) {
              callError(callArgs);
            }
          }
          if (json) {
            return call(json, callArgs);
          }
        };
      })(this),
      onerror: (function(_this) {
        return function(res) {
          _this.WM.Log.logError(_this.failedQueryError(res.finalUrl));
          if (confirm("Wiki Monkey error: Failed query\n\nDo you want " + "to retry?")) {
            _this.WM.Log.logInfo("Retrying ...");
            return _this.callAPIPost(params, api, call, callArgs, callError);
          } else if (callError) {
            return callError(callArgs);
          }
        };
      })(this)
    };
    string = "format=json" + joinParams(params);
    try {
      if (string.length > 8000) {
        query.data = new FormData();
        query.data.append("format", "json");
        for (p in params) {
          query.data.append(p, params[p]);
        }
      } else {
        throw "string <= 8000 characters";
      }
    } catch (error) {
      err = error;
      query.data = string;
      query.headers = {
        "Content-type": "application/x-www-form-urlencoded"
      };
    }
    try {
      return GM_xmlhttpRequest(query);
    } catch (error) {
      err = error;
      return this.WM.Log.logError(this.failedHTTPRequestError(err));
    }
  };

  joinParams = function(params) {
    var key, string;
    string = "";
    for (key in params) {
      string += "&" + key + "=" + encodeURIComponent(params[key]);
    }
    return string;
  };

  MW.prototype.callQuery = function(params, call, callArgs, callError) {
    var callBack;
    params.action = "query";
    callBack = (function(_this) {
      return function(res, args) {
        var page;
        page = Obj.getFirstItem(res.query.pages);
        return call(page, args);
      };
    })(this);
    return this.callAPIGet(params, null, callBack, callArgs, callError);
  };

  MW.prototype.callQueryEdit = function(title, call, callArgs) {
    var callBack, pars;
    callBack = (function(_this) {
      return function(page, args) {
        var edittoken, source, timestamp;
        source = page.revisions[0]["*"];
        timestamp = page.revisions[0].timestamp;
        edittoken = page.edittoken;
        return call(title, source, timestamp, edittoken, args);
      };
    })(this);
    pars = {
      prop: "info|revisions",
      rvprop: "content|timestamp",
      intoken: "edit",
      titles: title
    };
    return this.callQuery(pars, callBack, callArgs, null);
  };

  MW.prototype.getUserInfo = function(call) {
    var pars, storeInfo;
    storeInfo = (function(_this) {
      return function(res, call) {
        _this.userInfo = res;
        return call();
      };
    })(this);
    if (!this.userInfo) {
      pars = {
        action: "query",
        meta: "userinfo",
        uiprop: "groups"
      };
      return this.callAPIGet(pars, null, storeInfo, call, null);
    } else {
      return call();
    }
  };

  MW.prototype.isLoggedIn = function(call, args) {
    return this.getUserInfo((function(_this) {
      return function() {
        var test;
        test = _this.userInfo.query.userinfo.id !== 0;
        return call(test, args);
      };
    })(this));
  };

  MW.prototype.getUserName = function(call, args) {
    return this.getUserInfo((function(_this) {
      return function() {
        return call(_this.userInfo.query.userinfo.name, args);
      };
    })(this));
  };

  MW.prototype.isUserBot = function(call, args) {
    return this.getUserInfo((function(_this) {
      return function() {
        var groups, res;
        groups = _this.userInfo.query.userinfo.groups;
        res = groups.indexOf("bot") > -1;
        return call(res, args);
      };
    })(this));
  };

  MW.prototype.getBacklinks = function(bltitle, blnamespace, call, callArgs) {
    var query;
    query = {
      action: "query",
      list: "backlinks",
      bltitle: bltitle,
      bllimit: 500
    };
    if (blnamespace) {
      query.blnamespace = blnamespace;
    }
    return this._getBacklinksContinue(query, call, callArgs, []);
  };

  MW.prototype._getBacklinksContinue = function(query, call, callArgs, backlinks) {
    return this.callAPIGet(query, null, (function(_this) {
      return function(res, args) {
        backlinks = backlinks.concat(res.query.backlinks);
        if (res["query-continue"]) {
          query.blcontinue = res["query-continue"].backlinks.blcontinue;
          return _this._getBacklinksContinue(query, call, args, backlinks);
        } else {
          return call(backlinks, args);
        }
      };
    })(this), callArgs, null);
  };

  MW.prototype.getLanglinks = function(title, iwmap, call, callArgs) {
    var query;
    query = {
      action: "query",
      prop: "langlinks",
      titles: title,
      lllimit: 500,
      llurl: "1",
      redirects: "1"
    };
    if (iwmap) {
      query.meta = "siteinfo";
      query.siprop = "interwikimap";
      query.sifilteriw = "local";
    }
    return this._getLanglinksContinue(query, call, callArgs, [], null);
  };

  MW.prototype._getLanglinksContinue = function(query, call, callArgs, langlinks, iwmap) {
    return this.callAPIGet(query, null, (function(_this) {
      return function(res, args) {
        var page;
        page = Obj.getFirstItem(res.query.pages);
        langlinks = langlinks.concat(page.langlinks);
        if (res.query.interwikimap) {
          iwmap = res.query.interwikimap;
        }
        if (query.meta) {
          delete query.meta;
          delete query.siprop;
          delete query.sifilteriw;
        }
        if (res["query-continue"]) {
          query.llcontinue = res["query-continue"].langlinks.llcontinue;
          return _this._getLanglinksContinue(query, call, args, langlinks, iwmap);
        } else {
          return call(langlinks, iwmap, args);
        }
      };
    })(this), callArgs, null);
  };

  MW.prototype.getInterwikiMap = function(title, call, callArgs) {
    return this.callAPIGet({
      action: "query",
      meta: "siteinfo",
      siprop: "interwikimap",
      sifilteriw: "local"
    }, null, (function(_this) {
      return function(res, args) {
        return call(res.query.interwikimap, args);
      };
    })(this), callArgs, null);
  };

  MW.prototype.fixInterwikiUrl = function(url) {
    var f, furl, i, ref;
    for (f = i = 0, ref = interwikiFixes.length; 0 <= ref ? i < ref : i > ref; f = 0 <= ref ? ++i : --i) {
      furl = url.replace(interwikiFixes[f][0], interwikiFixes[f][1]);
      if (furl !== url) {
        return furl;
      }
    }
    return url;
  };

  MW.prototype.getSpecialList = function(qppage, siprop, call, callArgs) {
    var query;
    query = {
      action: "query",
      list: "querypage",
      qppage: qppage,
      qplimit: 500
    };
    if (siprop) {
      query.meta = "siteinfo";
      query.siprop = siprop;
    }
    return this._getSpecialListContinue(query, call, callArgs, [], {});
  };

  MW.prototype._getSpecialListContinue = function(query, call, callArgs, results, siteinfo) {
    return this.callAPIGet(query, null, (function(_this) {
      return function(res, args) {
        var key;
        results = results.concat(res.query.querypage.results);
        for (key in res.query) {
          if (key !== "querypage") {
            siteinfo[key] = res.query[key];
          }
        }
        if (query.meta) {
          delete query.meta;
          delete query.siprop;
        }
        if (res["query-continue"]) {
          query.qpoffset = res["query-continue"].querypage.qpoffset;
          return _this._getSpecialListContinue(query, call, args, results, siteinfo);
        } else {
          return call(results, siteinfo, args);
        }
      };
    })(this), callArgs, null);
  };

  MW.prototype.getUserContribs = function(ucuser, ucstart, ucend, call, callArgs) {
    var query;
    query = {
      action: "query",
      list: "usercontribs",
      ucuser: ucuser,
      ucprop: "",
      ucstart: ucstart,
      ucend: ucend,
      uclimit: 500
    };
    return this._getUserContribsContinue(query, call, callArgs, []);
  };

  MW.prototype._getUserContribsContinue = function(query, call, callArgs, results) {
    return this.callAPIGet(query, null, (function(_this) {
      return function(res, args) {
        results = results.concat(res.query.usercontribs);
        if (res["query-continue"]) {
          query.uccontinue = res["query-continue"].usercontribs.uccontinue;
          return _this._getUserContribsContinue(query, call, args, results);
        } else {
          return call(results, args);
        }
      };
    })(this), callArgs, null);
  };

  return MW;

})();
