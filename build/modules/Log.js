// Generated by CoffeeScript 1.12.7
var CSS, Str;

CSS = require('../../lib.js.generic/dist/CSS');

Str = require('../../lib.js.generic/dist/Str');

module.exports.Log = (function() {
  var classesToLevels;

  function Log(WM) {
    this.WM = WM;
    this._currentInfoDisplayState = true;
  }

  Log.prototype._makeLogArea = function() {
    var log, logarea, par;
    CSS.addStyleElement("#WikiMonkeyLogArea {height:10em; border:2px solid #07b; padding:0.5em; overflow:auto; resize:vertical; background-color:#111;} #WikiMonkeyLogArea p.timestamp, #WikiMonkeyLog p.message {border:none; padding:0; font-family:monospace; color:#eee;} #WikiMonkeyLogArea p.timestamp {margin:0 1em 0 0; white-space:nowrap;} #WikiMonkeyLogArea p.message {margin:0;} #WikiMonkeyLogArea div.mdebug, #WikiMonkeyLogArea div.minfo, #WikiMonkeyLogArea div.mwarning, #WikiMonkeyLogArea div.merror {display:flex;} #WikiMonkeyLogArea div.mhidden {display:none;} #WikiMonkeyLogArea div.mjson {display:none;} #WikiMonkeyLogArea div.mdebug p.message {color:cyan;} #WikiMonkeyLogArea div.mwarning p.message {color:gold;} #WikiMonkeyLogArea div.merror p.message {color:red;} #WikiMonkeyLogArea a {color:inherit; text-decoration:underline;}");
    log = document.createElement('div');
    log.id = 'WikiMonkeyLog';
    par = document.createElement('p');
    par.appendChild(this.makeFilterLink());
    par.appendChild(document.createTextNode(' '));
    par.appendChild(this.makeSaveLink());
    log.appendChild(par);
    logarea = document.createElement('div');
    logarea.id = 'WikiMonkeyLogArea';
    log.appendChild(logarea);
    return log;
  };

  Log.prototype.makeFilterLink = function() {
    var link, self;
    self = this;
    link = document.createElement('a');
    link.href = '#WikiMonkey';
    link.innerHTML = this.computeFilterLinkAnchor();
    link.addEventListener("click", function() {
      var i, len, msg, msgs;
      self._currentInfoDisplayState = !self._currentInfoDisplayState;
      this.innerHTML = self.computeFilterLinkAnchor();
      msgs = document.getElementById('WikiMonkeyLogArea').getElementsByClassName('minfo');
      for (i = 0, len = msgs.length; i < len; i++) {
        msg = msgs[i];
        msg.style.display = self.computeInfoDisplayStyle();
      }
      return this.scrollToBottom();
    }, false);
    return link;
  };

  Log.prototype.makeSaveLink = function() {
    var link, self;
    self = this;
    link = document.createElement('a');
    link.href = '#';
    link.download = 'WikiMonkey.log';
    link.innerHTML = '[save log]';
    link.id = 'WikiMonkeyLog-Save';
    link.addEventListener("click", function() {
      link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(self.composeSaveLogText());
      return link.download = self.composeSaveLogFilename();
    }, false);
    return link;
  };

  classesToLevels = {
    'mhidden': 'HDN',
    'mjson': 'JSN',
    'mdebug': 'DBG',
    'minfo': 'INF',
    'mwarning': 'WRN',
    'merror': 'ERR'
  };

  Log.prototype.composeSaveLogText = function() {
    var div, divs, i, len, level, log, message, ps, text, tstamp;
    log = document.getElementById('WikiMonkeyLogArea');
    divs = log.getElementsByTagName('div');
    text = '';
    for (i = 0, len = divs.length; i < len; i++) {
      div = divs[i];
      ps = div.getElementsByTagName('p');
      tstamp = ps[0].innerHTML;
      level = classesToLevels[div.className];
      message = ps[1].innerHTML;
      text += tstamp + '\t' + level + '\t' + message + '\n';
    }
    return text;
  };

  Log.prototype.composeSaveLogFilename = function() {
    var date;
    date = new Date();
    return 'WikiMonkey-' + date.getFullYear() + Str.padLeft(String(date.getMonth() + 1), '0', 2) + Str.padLeft(String(date.getDate()), '0', 2) + Str.padLeft(String(date.getHours()), '0', 2) + Str.padLeft(String(date.getMinutes()), '0', 2) + '.log';
  };

  Log.prototype.computeInfoDisplayStyle = function() {
    if (this._currentInfoDisplayState) {
      return 'flex';
    } else {
      return 'none';
    }
  };

  Log.prototype.computeFilterLinkAnchor = function() {
    if (this._currentInfoDisplayState) {
      return '[hide info messages]';
    } else {
      return '[show info messages]';
    }
  };

  Log.prototype.scrollToBottom = function() {
    var log;
    log = document.getElementById('WikiMonkeyLogArea');
    return log.scrollTop = log.scrollHeight - log.clientHeight;
  };

  Log.prototype.appendMessage = function(text, type) {
    var line, log, msg, now, test, tstamp;
    tstamp = document.createElement('p');
    tstamp.className = 'timestamp';
    now = new Date();
    tstamp.innerHTML = now.toLocaleTimeString();
    msg = document.createElement('p');
    msg.className = 'message';
    msg.innerHTML = text ? text : " ";
    line = document.createElement('div');
    line.appendChild(tstamp);
    line.appendChild(msg);
    line.className = type;
    if (type === 'minfo') {
      line.style.display = this.computeInfoDisplayStyle();
    }
    log = document.getElementById('WikiMonkeyLogArea');
    test = log.scrollTop + log.clientHeight === log.scrollHeight;
    log.appendChild(line);
    if (test) {
      return this.scrollToBottom();
    }
  };

  Log.prototype.logHidden = function(text) {
    return this.appendMessage(text, 'mhidden');
  };

  Log.prototype.logJson = function(component, data) {
    var text;
    text = JSON.stringify({
      "component": component,
      "data": data
    });
    return this.appendMessage(text, 'mjson');
  };

  Log.prototype.logDebug = function(text) {
    return this.appendMessage(text, 'mdebug');
  };

  Log.prototype.logInfo = function(text) {
    return this.appendMessage(text, 'minfo');
  };

  Log.prototype.logWarning = function(text) {
    return this.appendMessage(text, 'mwarning');
  };

  Log.prototype.logError = function(text) {
    return this.appendMessage(text, 'merror');
  };

  Log.prototype.linkToPage = function(url, anchor) {
    return "<a href=\"" + url + "\">" + anchor + "</a>";
  };

  Log.prototype.linkToWikiPage = function(title, anchor) {
    var wikiUrls;
    wikiUrls = this.WM.MW.getWikiUrls();
    return "<a href=\"" + wikiUrls.short + title + "\">" + anchor + "</a>";
  };

  return Log;

})();
